plugins {
    id 'java'
    id 'application'
    id 'org.jetbrains.kotlin.jvm' version '1.6.21'
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'org.beryx.jlink' version '2.25.0'
}

group 'de.dargmuesli'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

ext {
    ikonliVersion = '12.3.1'
    jacksonVersion = '2.13.3'
    junitVersion = '5.8.2'
    kotlinCoroutineVersion = '1.6.2'
    log4jVersion = '2.17.2'
    mp3agicVersion = '0.9.1'
    spotifyWebApiJavaVersion = '7.1.0'
}

sourceCompatibility = '11'
targetCompatibility = '17'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

application {
    mainModule = 'de.dargmuesli.spotitag'
    mainClass = 'de.dargmuesli.spotitag.MainApp'
}

[compileKotlin, compileTestKotlin].forEach {
    it.kotlinOptions {
        jvmTarget = '11'
    }
}

javafx {
    version = '11.0.2'
    modules = ['javafx.controls', 'javafx.fxml']
}

dependencies {
    implementation("com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}")
    implementation("com.mpatric:mp3agic:${mp3agicVersion}")
    implementation("org.apache.logging.log4j:log4j-api:${log4jVersion}")
    implementation("org.apache.logging.log4j:log4j-core:${log4jVersion}")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-javafx:${kotlinCoroutineVersion}")
    implementation("org.kordamp.ikonli:ikonli-fontawesome5-pack:${ikonliVersion}")
    implementation("org.kordamp.ikonli:ikonli-javafx:${ikonliVersion}")
    implementation("se.michaelthelin.spotify:spotify-web-api-java:${spotifyWebApiJavaVersion}")

    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
}

test {
    useJUnitPlatform()
}

jlink {
    imageZip = project.file("${buildDir}/distributions/app-${javafx.platform.classifier}.zip")
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'app'
    }
}

jlinkZip {
    group = 'distribution'
}

/* https://stackoverflow.com/a/50119235/4682621 ***********************************************************************/
def generatedVersionDir = "${buildDir}/generated-version"

sourceSets {
    main {
        output.dir(generatedVersionDir, builtBy: 'generateVersionProperties')
    }
}

task generateVersionProperties {
    doLast {
        def propertiesFile = file "$generatedVersionDir/version.properties"
        propertiesFile.parentFile.mkdirs()
        def properties = new Properties()
        properties.setProperty("version", rootProject.version.toString())
        propertiesFile.withWriter { properties.store(it, null) }
    }
}
processResources.dependsOn generateVersionProperties
/**********************************************************************************************************************/