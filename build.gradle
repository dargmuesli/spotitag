plugins {
    id 'java'
    id 'application'
    id 'org.jetbrains.kotlin.jvm' version '1.6.21'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.6.21'
    id 'org.openjfx.javafxplugin' version '0.0.13'
}

group 'de.dargmuesli'
version '0.0.0'

repositories {
    mavenCentral()
}

ext {
    apacheCommonsVersion = '1.9'
    ikonliVersion = '12.3.1'
    junitVersion = '5.9.0'
    kotlinCoroutineVersion = '1.6.4'
    kotlinSerializationVersion = '1.4.0'
    log4jVersion = '2.19.0'
    mp3agicVersion = '0.9.1'
    spotifyWebApiJavaVersion = '7.2.0'
}

sourceCompatibility = '11'
targetCompatibility = '11'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

application {
    mainModule = 'de.dargmuesli.spotitag'
    mainClass = 'de.dargmuesli.spotitag.MainApp'
}

[compileKotlin, compileTestKotlin].forEach {
    it.kotlinOptions {
        jvmTarget = '11'
    }
}

javafx {
    version = '11.0.2'
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.swing']
}

dependencies {
    implementation "com.mpatric:mp3agic:$mp3agicVersion"
    implementation "org.apache.commons:commons-text:$apacheCommonsVersion"
    implementation "org.apache.logging.log4j:log4j-api:$log4jVersion"
    implementation "org.apache.logging.log4j:log4j-core:$log4jVersion"
    implementation "org.apache.logging.log4j:log4j-slf4j-impl:$log4jVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-javafx:$kotlinCoroutineVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:$kotlinSerializationVersion"
    implementation "org.kordamp.ikonli:ikonli-fontawesome5-pack:$ikonliVersion"
    implementation "org.kordamp.ikonli:ikonli-javafx:$ikonliVersion"
    implementation "se.michaelthelin.spotify:spotify-web-api-java:$spotifyWebApiJavaVersion"

    testImplementation("org.junit.jupiter:junit-jupiter-api:$junitVersion")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:$junitVersion")
}

test {
    useJUnitPlatform()
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        freeCompilerArgs += '-opt-in=kotlin.RequiresOptIn'
    }
}

/* https://stackoverflow.com/a/50119235/4682621 ***********************************************************************/
def generatedVersionDir = "${buildDir}/resources/main"

sourceSets {
    main {
        output.dir(generatedVersionDir, builtBy: 'generateVersionProperties')
    }
}

task generateVersionProperties {
    doLast {
        def propertiesFile = file "$generatedVersionDir/version.properties"
        propertiesFile.parentFile.mkdirs()
        def properties = new Properties()
        properties.setProperty("version", rootProject.version.toString())
        propertiesFile.withWriter { properties.store(it, null) }
    }
}
processResources.dependsOn generateVersionProperties
/**********************************************************************************************************************/