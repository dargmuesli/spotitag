import org.jetbrains.kotlin.gradle.dsl.JvmTarget

plugins {
    id 'application'
    id 'org.javamodularity.moduleplugin' version '1.8.15'
    id 'org.jetbrains.kotlin.jvm' version '2.2.20'
    id 'org.jetbrains.kotlin.plugin.serialization' version '2.2.20'
    id 'org.openjfx.javafxplugin' version '0.1.0'
}

group = 'de.dargmuesli'
version = '1.0.1'

application {
    mainModule = 'de.dargmuesli.spotitag'
    mainClass = 'de.dargmuesli.spotitag.MainApp'

    applicationDefaultJvmArgs = ["--add-reads", "kotlin.stdlib=kotlinx.coroutines.core"] // needed for debugging
}

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21

    modularity.inferModulePath = false // https://github.com/openjfx/javafx-gradle-plugin/pull/154/files
}

kotlin {
    compilerOptions {
        jvmTarget = JvmTarget.JVM_21
    }
}

repositories {
    mavenCentral()
}

ext {
    apacheCommonsVersion = '1.14.0'
    ikonliVersion = '12.4.0'
    junitVersion = '6.0.0'
    kotlinCoroutineVersion = '1.10.2'
    kotlinSerializationVersion = '1.9.0'
    log4jVersion = '2.25.2'
    mp3agicVersion = '0.9.1'
    spotifyWebApiJavaVersion = '9.3.0'
}

dependencies {
    implementation "com.mpatric:mp3agic:$mp3agicVersion"
    implementation "org.apache.commons:commons-text:$apacheCommonsVersion"
    implementation "org.apache.logging.log4j:log4j-api:$log4jVersion"
    implementation "org.apache.logging.log4j:log4j-core:$log4jVersion"
    implementation "org.apache.logging.log4j:log4j-slf4j2-impl:$log4jVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-javafx:$kotlinCoroutineVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:$kotlinSerializationVersion"
    implementation "org.kordamp.ikonli:ikonli-fontawesome5-pack:$ikonliVersion"
    implementation "org.kordamp.ikonli:ikonli-javafx:$ikonliVersion"
    implementation "se.michaelthelin.spotify:spotify-web-api-java:$spotifyWebApiJavaVersion"

    testImplementation("org.junit.jupiter:junit-jupiter-api:$junitVersion")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:$junitVersion")
}

javafx {
    version = '21.0.8'
    modules = ['javafx.fxml', 'javafx.swing']
}

test {
    useJUnitPlatform()
}

/* https://stackoverflow.com/a/50119235/4682621 ***********************************************************************/
def generatedVersionDir = "${layout.buildDirectory.asFile.get()}/resources/main"

sourceSets {
    main {
        output.dir(generatedVersionDir, builtBy: 'generateVersionProperties')
    }
}

tasks.register('generateVersionProperties') {
    doLast {
        def propertiesFile = file "$generatedVersionDir/version.properties"
        propertiesFile.parentFile.mkdirs()
        def properties = new Properties()
        properties.setProperty('version', rootProject.version.toString())
        propertiesFile.withWriter { properties.store(it, null) }
    }
}
processResources.dependsOn generateVersionProperties
/**********************************************************************************************************************/